# Configuration file

##########################################################################################################
# general
#--------------------------------------------------------------------------------------------------------#
# Up And Down changes how player motion is used to move the player. Some items may move the player in
# 	unexpected ways when used. If that's the case, try adding them to one of the below lists. The
# format is (text in square brackets is optional)
# 
# 	"<mod id>:<item name>[:damage][:damage][...],<compatibility modifier>:[compatibility modifier]"
# 
# Where a compatibility modifier is case insensitive and one of:
# relativeRotation, relativeMotionAll, relativeMotionX, relativeMotionY, relativeMotionZ, absoluteMotionX,
# 	absoluteMotionY or absoluteMotionZ
# 
# These modify the player's rotation and/or motion before the item is used (and then puts the rotation/motion
# 	back to normal, taking into account any changes to motion, !!but not taking into account any changes to
# 	rotation!!).
# 
# You may use a max of one type of modifier per entry (up to 1 motion modifier and up to 1 rotation modifier).
# 
# The default state when using items is that both rotation and motion are absolute (as if the player currently
# 	has downwards gravity).
# 
# Using relativeMotionX implies that Z and Y motion will be absolute.
# 
# Likewise, using absoluteMotionY implies that X and Z motion will be relative.
# 
# So if you wanted both X and Y motion to be relative, you would use absoluteMotionZ.
# 
# Examples:
# 'minecraft:stick:0:4,relativeMotionX' - Adds a relative X motion modifier to vanilla sticks with damage
# 	values 0 and 4.
# 'tconstruct:longsword,relativeMotionAll:relativeRotation' - Adds a relative X, Y and Z motion modifier
# 	combined with a relative rotation modifier to all damage values of Tinkers' Construct Longswords.
##########################################################################################################

general {
    # Adding an item to this list will apply the compatibility when a player stops 'using' an item. For bows,
    # 	this is when you release right click to fire an arrow.
    #  [default: [tconstruct:longsword,relativeMotionAll:relativeRotation]]
    S:modCompat.onStoppedUsing <
        tconstruct:longsword,relativeMotionAll:relativeRotation
     >

    # Adding an item to this list will apply the compatibility when the item is right clicked on air, or on
    # 	a block that doesn't open a chest/machine GUI or otherwise change state, such as right clicking 
    # 	on a vanilla lever. Specifically when the item's "onItemRightClick" method is called from
    # 	within ItemStack::useItemRightClick.
    # 
    # The Tinkers' Construct Rapier makes the player jump upwards and backwards
    # 	slightly when right clicked. We want the player to jump upwards relative to their view of the
    # 	world, so we will need at least use relative Y motion for this compatibility. We also want the
    # 	player to jump backwards relative to their view of the world. The rapier uses the player's
    # 	pitch and yaw rotations to calculate the backwards direction and modifies X and Z motion
    # 	accordingly, so we need them to be relative too.
    #  [default: [tconstruct:rapier,relativeMotionAll:relativeRotation]]
    S:modCompat.onUseGeneral <
        tconstruct:rapier,relativeMotionAll:relativeRotation
     >

    # Adding an item to this list will apply the compatibility when the item is right clicked on a block.
    # 	Specifically when the item's "onItemUse" method is called from within ItemStack::onItemUse.
    #  [default: ]
    S:modCompat.onUseOnBlock <
     >
}


